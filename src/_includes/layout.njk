<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="no" lang="no">

    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
        <meta name="facebook-domain-verification" content="dkr7203pb50lyyyg83ogeuoqujo5a8"/>
        <title>
            {{ title or metadata.title }}
        </title>

        <script async src="https://www.googletagmanager.com/gtag/js?id={{ ga.tagId | e }}"></script>
        <script>

            window.ebLog = (trackObject) => {
                if (trackObject.level === 'ERROR') {
                    console.error(trackObject);
                }
            };
        </script>
        <style>
            .CybotCookiebotScrollContainer {
                overflow-x: hidden;
            }
        </style>

        <script src="https://ebcontent.ekstrabladet.dk/ext_component/cmp/eb-cmp.js?v=master-51"></script>
        <script>
            window.addEventListener("CookiebotOnDialogDisplay", function () {
                const a = document.createElement("a"),
                    c = Cookiebot.dialog.userLanguage,
                    title = {
                        en: "It is your choice",
                        da: "Det er dit valg"
                    },
                    privacylink = "http://jppol.dk/" + (
                        c !== "da"
                        ? "en/"
                        : "") + "privatlivspolitik/",
                    r = new RegExp("(persondatapolitik|how your personal data is processed)."),
                    t = document.getElementById("CybotCookiebotDialogBodyContentTitle"),
                    txt = document
                        .evaluate('//*[@id="CybotCookiebotDialogBodyContentText"]/text()[3]', document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null)
                        .singleNodeValue;

                if (!title[c] || !t || !txt) 
                    return;
                a.href = privacylink;
                a.target = "_blank";
                t.innerText = title[c];
                if (c == "da") {
                    a.innerText = txt
                        .data
                        .match(r)[0];
                    txt.data = txt
                        .data
                        .replace(r, "");
                    txt
                        .parentNode
                        .insertBefore(a, txt.nextSibling);
                }

                // LI snippet
                const IABPurposesLI = document.querySelectorAll(".CybotCookiebotDialogBodyIABButtonPurposesLegitimateInterestSelection");

                for (let i of IABPurposesLI) {
                    if (/[34]/.test(i.dataset.iabpurposeid)) {
                        i.checked = false;
                        i.disabled = true;
                    }
                }
            });
            window.addEventListener("CookiebotOnConsentReady", function () {
                try {
                    // cookie expirery snippet
                    var cookies = document
                            .cookie
                            .split(";"),
                        consentCookie = "",
                        consentDate = Cookiebot.consentUTC,
                        consentExpiry = new Date(consentDate.setMonth(consentDate.getMonth() + 12)),
                        now = new Date();

                    for (var i = 0; i < cookies.length; i++) {
                        if (cookies[i].indexOf("CookieConsent") !== -1) {
                            consentCookie = cookies[i];
                        }
                    }

                    if (consentCookie !== "" && now < consentExpiry) {
                        document.cookie = consentCookie + ";expires=" + consentExpiry.toUTCString() + ";path=/";
                    }
                } catch (error) {
                    console.error("expire snippet");
                }
            });
        </script>
        <script id="CookiebotConfiguration" type="application/json" data-cookieconsent="ignore">
            {
                "Frameworks": {
                    "IABTCF2": {
                        "AllowedSpecialFeatures": [],
                        "AllowedGoogleACVendors": [
                            70,
                            89,
                            108,
                            122,
                            149,
                            162,
                            167,
                            196,
                            241,
                            259,
                            311,
                            317,
                            323,
                            338,
                            415,
                            440,
                            449,
                            486,
                            494,
                            495,
                            540,
                            574,
                            817,
                            864,
                            981,
                            1051,
                            1095,
                            1097,
                            1127,
                            1201,
                            1205,
                            1211,
                            1276,
                            1301,
                            1365,
                            1415,
                            1449,
                            1570,
                            1577,
                            1651,
                            1716,
                            1765,
                            1870,
                            1878,
                            1889,
                            2072,
                            2202,
                            2253,
                            2299,
                            2316,
                            2337,
                            2357,
                            2526,
                            2568,
                            2571,
                            2575,
                            2677,
                            2891,
                            3251
                        ]
                    }
                }
            }
        </script>
        <script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-bulkconsentmode="disabled"
        data-cbid="d0ded67e-acef-45a1-9752-84167eeb8118" data-framework="IAB" type="text/javascript"></script>

        <!-- Longboat -->
        <script>
            window.longboat = window.longboat || {};
            window.longboat.queue = window.longboat.queue || [];

            window
                .longboat
                .queue
                .push(() => {
                    window
                        .longboat
                        .setEnvironment('production');

                    window
                        .longboat
                        .setProperties({aid: 2, cid: '', skid: '2206', st: 'sec'});
                });
        </script>
        {# 
    <script async defer src="https://ebcontent.ekstrabladet.dk/ext_component/longboat/longboat.js?v=master-39"></script>

    <script src="https://acdn.adnxs.com/ast/ast.js?c="></script>

    <script>
        // create empty apntag object if it doesn't exist
        window.apntag = window.apntag || {};
        // create a queue on the apntag object
        window.apntag.anq = window.apntag.anq || [];

        function expandBanner() {
            try {
                const bodyBg = window.getComputedStyle(document.body)['background-image'];
                const wallpaperEl = document.getElementById('wallpaperBackground');
                let aWpBg = 'none';
                if (wallpaperEl !== null) {
                    aWpBg = wallpaperEl.dataset.wallpaper;
                    if (!aWpBg) {
                        aWpBg = window.getComputedStyle(wallpaperEl)['background-image'];
                    }
                }
                const monsterEle = document.getElementById('ebcontentMegaboard');

                if (bodyBg !== 'none' || aWpBg !== 'none' || monsterEle.firstChild) {
                    monsterEle.style.display = 'block';
                }
            } catch (err) {
                console.error('findWallpaper', err);
            }
        }

        const apntag = window.apntag;
        const ebContentKeywords = 'eb-advertorials'.split('/').slice(1)
        // push commands to loading queue, to allow for async loading
        apntag.anq.push(() => {
            const pageObj = {
                disablePsa: true,
                keywords: {
                    article: '',
                    ebcontent: ebContentKeywords
                },
                member: 9290,
                publisherId: 1410923 // 
            };
            apntag.setPageOpts(pageObj);
            var defineObject = {
                invCode: 'ekstra_bladet_ebcontent_megaboard_top',
                sizes: [[930, 180]],
                targetId: 'ebcontentMegaboard'
            }
            apntag.defineTag(defineObject);
            apntag.onEvent('adAvailable', 'ebcontentMegaboard', function () {
                apntag.showTag('ebcontentMegaboard');
            });
            apntag.onEvent('adLoaded', 'ebcontentMegaboard', function () {
                expandBanner();
            });
        });

        window.addEventListener('load', function () {
            apntag.anq.push(() => {
                apntag.loadTags();
            });
        });
    </script> #}
    </head>

    <body>

        {{ content | safe }}

        <script>
            window.dataLayer = window.dataLayer || [];
            function gtag() {
                dataLayer.push(arguments);
            }
            gtag('js', new Date());

            gtag('config', '{{ ga.tagId | e }}', {
                ...(window.pageProps || {}),
                debug_mode: {{ ga.debug_mode | e }}
            });

            document.addEventListener('click', function (e) {
                if ((e.target.dataset || {}).action === 'cta') {
                    gtag('event', 'click', {
                        link_classes: e.target.className,
                        link_domain: e.target.hostname,
                        link_id: e.target.id,
                        link_url: e.target.href,
                        outbound: true
                    })
                }
            })
        </script>

        <footer class="footer" role="footer">
            <p style="clear: both; overflow: hidden;">

            Annoncesite udgivet af <a href="https://ekstrabladet.dk">Ekstra Bladet</a>. Ansvarshavende Knud Brix.
            <span style="float: right;">
                    <button class="d-inlineblock v-align--b mar-s--l" onclick="Cookiebot.renew()"
                    style="background: transparent;border: 0;color: #ccc;cursor: pointer;font-size: 10px;margin: 0 0 0 5px;padding: 0;">
                        <svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg"
                        xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 162.1 169.3"
                        style="display: inline-block; fill: #818a91; height: 13px; vertical-align: middle; width: 13px;"
                        xml:space="preserve">
                            <g>
                                <path
                                d="M159.9,105.1c0.9,0.5,1.5,1.1,1.9,2c0.3,0.9,0.4,1.8,0.2,2.7c-3.9,12.1-10.1,22.8-18.8,32.1c-0.7,0.7-1.5,1.1-2.4,1.4
                  c-0.9,0.2-1.8,0.1-2.7-0.3l-14.3-8.5c-6.1,5.2-13.1,9.2-20.8,11.9v16.7c0,0.9-0.3,1.8-0.9,2.6s-1.3,1.3-2.2,1.5
                  c-12.5,2.7-25,2.7-37.6,0c-0.9-0.2-1.6-0.7-2.2-1.5s-0.9-1.6-0.9-2.6v-16.7c-7.7-2.7-14.7-6.7-20.8-11.9L24,143
                  c-0.9,0.5-1.8,0.6-2.7,0.3s-1.7-0.7-2.4-1.4c-8.6-9.3-14.9-20-18.8-32.1c-0.2-0.9-0.2-1.8,0.2-2.7s1-1.6,1.9-2l14.3-8.5
                  c-1.4-8-1.4-15.9,0-23.9L2.2,64.2c-0.9-0.5-1.5-1.1-1.9-2c-0.3-0.9-0.4-1.8-0.2-2.7C4,47.3,10.3,36.6,18.9,27.3
                  c0.7-0.7,1.5-1.1,2.4-1.4c0.9-0.2,1.8-0.1,2.7,0.3l14.3,8.5c6.1-5.2,13.1-9.2,20.8-11.9V6.1c0-0.9,0.3-1.8,0.9-2.6s1.3-1.3,2.2-1.5
                  c12.5-2.7,25-2.7,37.6,0c0.9,0.2,1.6,0.7,2.2,1.5s0.9,1.6,0.9,2.6v16.7c7.7,2.7,14.7,6.7,20.8,11.9l14.3-8.5
                  c0.9-0.5,1.8-0.6,2.7-0.3c0.9,0.2,1.7,0.7,2.4,1.4c8.6,9.3,14.9,20,18.8,32.1c0.2,0.9,0.2,1.8-0.2,2.7c-0.3,0.9-1,1.6-1.9,2
                  l-14.3,8.5c1.4,8,1.4,15.9,0,23.9L159.9,105.1z M100.3,65.4c-5.3-5.3-11.8-8-19.3-8s-13.9,2.7-19.3,8s-8,11.8-8,19.3
                  c0,7.5,2.7,13.9,8,19.3c5.3,5.3,11.8,8,19.3,8s13.9-2.7,19.3-8c5.3-5.3,8-11.8,8-19.3C108.4,77.1,105.7,70.7,100.3,65.4z"/>
                            </g>
                        </svg>
                    Administrér samtykke
                </button>
                </span>
            </p>
        </footer>
        <script src="https://apis.google.com/js/platform.js" async defer>
            {
                lang: 'da'
            }
        </script>
        <!-- EBContent tracking -->
        <script>
            class EVID {

                _evid;

                get evid() {
                    if (!this._evid) {
                        this.generate();
                    }
                    return this._evid;
                };

                generate() {
                    var getRandomValues = (typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto)) || (typeof msCrypto !== 'undefined' && typeof window.msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto));

                    function rng() {
                        if (getRandomValues) {
                            // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto
                            var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef

                            getRandomValues(rnds8);

                            return rnds8;
                        } else {
                            // Math.random()-based (RNG)
                            //
                            // If all else fails, use Math.random().  It's fast, but is of unspecified
                            // quality.
                            var rnds = new Array(16);

                            for (var i = 0, r; i < 16; i++) {
                                if ((i & 0x03) === 0) {
                                    r = Math.random() * 0x100000000;
                                }

                                rnds[i] = (r >>> ((i & 0x03) << 3)) & 0xff;
                            }

                            return rnds;
                        }
                    }

                    var byteToHex = [];

                    for (var i = 0; i < 256; ++i) {
                        byteToHex[i] = (i + 0x100)
                            .toString(16)
                            .substr(1);
                    }

                    function bytesToUuid(buf, offset) {
                        var i = offset || 0;
                        var bth = byteToHex;
                        // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4
                        return [
                            bth[buf[i++]],
                            bth[buf[i++]],
                            bth[buf[i++]],
                            bth[buf[i++]],
                            '-',
                            bth[buf[i++]],
                            bth[buf[i++]],
                            '-',
                            bth[buf[i++]],
                            bth[buf[i++]],
                            '-',
                            bth[buf[i++]],
                            bth[buf[i++]],
                            '-',
                            bth[buf[i++]],
                            bth[buf[i++]],
                            bth[buf[i++]],
                            bth[buf[i++]],
                            bth[buf[i++]],
                            bth[buf[i++]]
                        ].join('');
                    }

                    function uuidv4(options, buf, offset) {
                        var i = (buf && offset) || 0;

                        if (typeof options === 'string') {
                            buf = options === 'binary'
                                ? new Array(16)
                                : null;
                            options = null;
                        }
                        options = options || {};

                        var rnds = options.random || (options.rng || rng)();

                        // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
                        rnds[6] = (rnds[6] & 0x0f) | 0x40;
                        rnds[8] = (rnds[8] & 0x3f) | 0x80;

                        // Copy bytes to buffer, if provided
                        if (buf) {
                            for (var ii = 0; ii < 16; ++ii) {
                                buf[i + ii] = rnds[ii];
                            }
                        }

                        return buf || bytesToUuid(rnds);
                    };
                    this._evid = uuidv4();
                }

                refresh() {
                    this.generate();
                    return this._evid;
                }
            }
            class EbUnload {
                unloadEvent;
                unloadFired;

                constructor() {
                    /**
                 * Listen for all the unload events available
                 */
                    document.addEventListener('visibilitychange', this.handleUnload.bind(this, 'visibilitychange'), false);
                    document.addEventListener('pagehide', this.handleUnload.bind(this, 'pagehide'), false);
                    document.addEventListener('beforeunload', this.handleUnload.bind(this, 'beforeunload'), false);
                    document.addEventListener('unload', this.handleUnload.bind(this, 'unload'), false);

                    this.unloadFired = false;
                }

                handleUnload(nativeEventUsed) {
                    /**
                 * if the nativeEventUsed is the visibilitychange event,
                 * we need to test that document is hidden, else return.
                 */
                    if (nativeEventUsed === 'visibilitychange' && !document.hidden) {
                        return;
                    }

                    if (!this.unloadFired) {
                        this.unloadEvent = new CustomEvent('ebunload', {detail: {
                                nativeEventUsed
                            }});
                        window.dispatchEvent(this.unloadEvent);

                        this.unloadFired = true;

                        setTimeout(() => {
                            this.unloadFired = false;
                        }, 1000);
                    }
                }
            }

            function getCookiebyName(name) {
                const pair = document
                    .cookie
                    .match(new RegExp(name + '=([^;]+)'));
                return !!pair
                    ? pair[1]
                    : '';
            }

            function setCookie(name, value, days) {
                let expires = '';
                if (days) {
                    const date = new Date();
                    const dateRes = new Date(date.setDate(date.getDate() + days));
                    expires = '; expires=' + dateRes.toUTCString();
                }
                document.cookie = name + '=' + (
                value || '') + expires + '; path=/';
                return getCookiebyName(name);
            }

            function getEbidCookie() {
                const ebidCookie = getCookiebyName('_eb_id');
                if (ebidCookie) {
                    return ebidCookie;
                } else {
                    const evid = new EVID();
                    const uuid = evid.refresh();

                    setCookie('_eb_id', uuid, 365);
                    return uuid;
                }
            }

            function getCookieBotID() {
                const cookieConsentID = Cookiebot && Cookiebot.consentID
                    ? Cookiebot.consentID
                    : '';

                return cookieConsentID;
            }

            /*
         * Adding clickevents on related links
         * Relateret link type (extlt)
         * Relateret link destinations artikel (extld)
         */
            function longboatAddExtlinkEventsLoopFunction(extlinkItems, index) {
                const element = extlinkItems[index];
                // adding 'activated' to tracktype to make sure its only
                // getting one onclick event if longboatAddListEvents() is
                // being called multiple times
                element.dataset.tracktype = 'extlink|activated';
                // adding clickevent that calls the query builder
                element.addEventListener('click', () => {
                    const hrefRes = element
                        .href
                        .replaceAll('&', ';');
                    window
                        .longboat
                        .queue
                        .push({
                            once: false,
                            eventType: 'extlink',
                            data: {
                                extlt: 'content-embed',
                                extld: hrefRes
                            }
                        });
                });
            }

            function longboatAddExtlinkEvents() {
                const articleContent = document.querySelector('.bodytext');

                if (articleContent) {
                    const extlinkItems = articleContent.querySelectorAll('a:not([data-tracktype="extlink|activated"])');
                    for (let index = 0; index < extlinkItems.length; index++) {
                        longboatAddExtlinkEventsLoopFunction(extlinkItems, index);
                    }
                }
            }

            const sendProgress = (scroll) => {
                window
                    .longboat
                    .queue
                    .push({eventType: 'scroll', data: {
                            scroll
                        }});
            };

            function longboatTrackArticleProgress() {
                const articleContent = document.querySelector('.bodytext');
                let progress = 0;
                let inThrottle = false;

                function setNewProgress() {
                    if (!inThrottle) {
                        inThrottle = true;

                        setTimeout(() => {
                            return (inThrottle = false);
                        }, 100);

                        const rect = articleContent.getBoundingClientRect();
                        const topFromBottom = rect.top - window.innerHeight;
                        const percents = Math.floor((topFromBottom / rect.height) * 100);
                        const newProgress = Math.abs(percents);

                        if (newProgress > progress) {
                            progress = newProgress;
                        }

                        if (progress < 0) {
                            progress = 0;
                        } else if (progress > 100) {
                            progress = 100;
                        }
                    }
                }

                if (articleContent) {
                    window.removeEventListener('scroll', setNewProgress, true);
                    window.addEventListener('scroll', setNewProgress, true);
                    window.addEventListener('ebunload', () => {
                        setNewProgress();
                        sendProgress(progress);
                    });
                    setNewProgress();
                }
            }

            class EbContentTracking {
                consentSet = false;
                evidHandler = new EVID();
                pageshowSet = false;
                pageviewOptions;
                pageviewTracked = false;

                constructor(pageviewOptions) {
                    new EbUnload();
                    this.pageviewOptions = pageviewOptions;
                    ebCMP.doWeHaveConsent({
                        callback: (consent) => {
                            longboatTrackArticleProgress();
                            longboatAddExtlinkEvents();
                            this.consentReady(consent);
                        },
                        consentTo: ebCMP.CONSENTNAMES.fullconsent
                    });
                    window.addEventListener('pageshow', () => {
                        this.pageshowReady();
                    });
                }

                consentReady(consent) {
                    this.consentSet = true;
                    this.consent = consent;
                    window
                        .longboat
                        .queue
                        .push(() => {
                            window
                                .longboat
                                .setProperties({csstatus: consent, cmpid: getCookieBotID()});
                        });
                    this.setupDone();
                }

                pageshowReady() {
                    this.pageshowSet = true;
                    window
                        .longboat
                        .queue
                        .push(() => {
                            window
                                .longboat
                                .setProperties({
                                    evid: this
                                        .evidHandler
                                        .refresh()
                                });
                        });
                    this.trackPageview();
                    this.setupDone();
                }

                setupDone() {
                    if (this.consentSet && this.pageshowSet) {
                        window
                            .longboat
                            .queue
                            .push(() => {
                                window
                                    .longboat
                                    .setProperties({
                                        ebid: this.consent
                                            ? getEbidCookie()
                                            : ''
                                    });
                            });
                    }
                }

                trackPageview() {
                    if (!this.pageviewTracked) {
                        this.pageviewTracked = true;
                        const ref = document.referrer
                            ? document.referrer
                            : '';
                        window
                            .longboat
                            .queue
                            .push({
                                eventType: 'pageview',
                                data: {
                                    ref,
                                    ...this.pageviewOptions
                                }
                            });
                    }
                }
            }

            new EbContentTracking({at: ''});
        </script>
    </body>

</html>